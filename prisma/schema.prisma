// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type LocationType {
  country  String
  province String
  city     String
  address  String?
}

type SocialLinks {
  platform String
  link     String
}

type ScreeningQuestions {
  question String
  type     String
}

type Media {
  name String
  url  String
}

enum Status {
  expire @map("expire")
  pause  @map("pause")
  active @map("active")
  draft  @map("draft")
}

enum Role {
  recruiter @map("recruiter ")
  company   @map("company")
  candidate @map("candidate")

  // Add more roles as needed
}

model Location {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
  country  String
  province String
  city     String
  address  String?
}

model EmailPreferences {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @unique @db.ObjectId
  jobUpdates      Boolean @default(true)
  messageThread   Boolean @default(true)
  insightfulTips  Boolean @default(false)
  promoNewsletter Boolean @default(false)
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now())
  companyAdmin     Company?          @relation("companyAdmin", fields: [companyAdminId], references: [id])
  companyAdminId   String?           @db.ObjectId
  employee         Employee?
  company          Company?          @relation("UserToCompany")
  stages           Int?              @default(0)
  firstName        String
  lastName         String
  active           Boolean?          @default(true)
  delete           Boolean?          @default(false)
  flag             Boolean?          @default(false)
  email            String?           @unique
  profilePic       String?
  otp              Int?
  role             Role
  accountType      String?
  employeeRole     String?
  jobTitle         String?
  otpTimestamp     DateTime?         @default(now())
  verified         Boolean           @default(false)
  password         String?
  phoneNumber      Int?
  location         Location[]
  emailPreferences EmailPreferences?
}

model Company {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime       @default(now())
  user             User?          @relation("UserToCompany", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String?        @unique @db.ObjectId
  companyEmployees User[]         @relation("companyAdmin")
  companyName      String
  industry         String?
  directory        String
  noOfEmployees    Int?
  yearEstablished  Int?
  description      String
  webUrl           String?
  telePhone        String?
  companyLogo      String?
  socialLinks      SocialLinks[]
  location         LocationType[]
  jobs             Job[]
}

model Employee {
  createdAt      DateTime         @default(now())
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  // user           User?
  user           User?            @relation(fields: [userId], references: [id])
  userId         String           @unique @db.ObjectId
  description    String?
  phoneNumber    Int?
  workExperience WorkExperience[]
  education      Education[]
  certification  Certification[]
  skills         Skills[]
  achievement    Achievement[]
  location       LocationType

  attachment Attachment?

  // appliedJobIds String[]      @db.ObjectId
  // appliedJob    AppliedJobs[] @relation(fields: [appliedJobIds], references: [id])
}

model WorkExperience {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  employee         Employee?    @relation(fields: [employeeId], references: [id])
  employeeId       String?      @db.ObjectId
  companyName      String
  designation      String
  currentlyWorking Boolean?
  location         LocationType
  employeeType     String
  jobFamily        String
  jobSummary       String
  startDate        DateTime     @default(now())
  endDate          DateTime?    @default(now())
  createdAt        DateTime     @default(now())
}

model Education {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  employee          Employee?    @relation(fields: [employeeId], references: [id])
  employeeId        String?      @db.ObjectId
  schoolName        String
  diploma           String
  currentlyEnrolled Boolean?
  location          LocationType
  gpa               String
  description       String
  startDate         DateTime     @default(now())
  endDate           DateTime?    @default(now())
  createdAt         DateTime     @default(now())
}

model Certification {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  employee         Employee? @relation(fields: [employeeId], references: [id])
  employeeId       String?   @db.ObjectId
  certificateName  String
  organizationName String
  certificateId    String
  createdAt        DateTime  @default(now())
  issuedOn         DateTime  @default(now())
  validUntil       DateTime? @default(now())
  noExpiry         Boolean?
  certificateMedia Media[]
}

model Skills {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
  name       String
  level      String
}

model Achievement {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  employee          Employee? @relation(fields: [employeeId], references: [id])
  employeeId        String?   @db.ObjectId
  name              String
  issueOrganization String

  issuedOn DateTime? @default(now())
  media    Media[]
}

model Attachment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String    @unique @db.ObjectId
  resume     Media[]
  additional Media[]
}

model Job {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  company             Company?             @relation(fields: [companyId], references: [id])
  companyId           String?              @db.ObjectId
  createdAt           DateTime             @default(now())
  active              Boolean?             @default(true)
  delete              Boolean?             @default(false)
  status              Status               @default(active)
  // status              Int                  @default(1)
  // -1 for expire job
  // 0 for pause  job?
  // 1 for active  job?
  // 2 for draft  job?
  flag                Boolean?             @default(false)
  draft               Boolean?             @default(false)
  title               String
  employmentType      String
  locationType        String
  seniorityLevel      String
  applicationType     String
  externalURL         String
  jobDescription      String
  opening             Int
  minimumEducation    String
  minimumSalary       String
  maximumSalary       String
  yearsOfExperience   String
  jobFamily           String
  rate                String
  tags                String[]
  location            LocationType
  desiredSkills       String
  applicationDeadline DateTime
  ScreeningQuestions  ScreeningQuestions[]
}

// model AppliedJobs {
//   matchCandiate Boolean
//   id            String     @id @default(auto()) @map("_id") @db.ObjectId
//   active        Boolean    @default(false)
//   Archived      Boolean    @default(false)
//   employeeIds     String[]   @db.ObjectId
//   employees     Employee[] @relation(fields: [employeeIds], references: [id])
//   // job           Job        @relation(fields: [jobId], references: [id])
//   // jobId         String     @db.ObjectId
// }
