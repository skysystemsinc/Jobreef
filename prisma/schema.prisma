// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type LocationType {
  country  String
  province String
  city     String
  address  String?
}

type CertificateMedia {
  name String
  url  String
}

model Location {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
  country  String
  province String
  city     String
  address  String?
}

model EmailPreferences {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @unique @db.ObjectId
  jobUpdates      Boolean @default(true)
  messageThread   Boolean @default(true)
  insightfulTips  Boolean @default(false)
  promoNewsletter Boolean @default(false)
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now())
  company          Company?          @relation(fields: [companyId], references: [id])
  companyId        String?           @db.ObjectId
  employee         Employee?         @relation(fields: [employeeId], references: [id])
  employeeId       String?           @unique @db.ObjectId
  firstName        String
  lastName         String
  email            String?           @unique
  profilePic       String?
  otp              Int?
  role             String
  accountType      String?
  verified         Boolean           @default(false)
  password         String
  phoneNumber      Int?
  location         Location[]
  emailPreferences EmailPreferences?
}

model Company {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime       @default(now())
  user            User[]
  companyName     String
  industry        String?
  directory       String
  noOfEmployees   Int?
  yearEstablished Int?
  description     String
  webUrl          String?
  telePhone       String?
  companyLogo     String?
  socialLinks     SocialLinks[]
  location        LocationType[]
}

model Employee {
  createdAt      DateTime         @default(now())
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  user           User?
  summary        String
  workExperience WorkExperience[]
  education      Education[]
  certification  Certification[]
  skills         Skills[]
  achievement    Achievement[]
  attachment     Attachment[]
}

model WorkExperience {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  employee         Employee?    @relation(fields: [employeeId], references: [id])
  employeeId       String?      @db.ObjectId
  companyName      String
  designation      String
  currentlyWorking Boolean?
  location         LocationType
  employeeType     String
  jobFamily        String
  jobSummary       String
  startDate        DateTime     @default(now())
  endDate          DateTime?    @default(now())
  createdAt        DateTime     @default(now())
}

model Education {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  employee          Employee?    @relation(fields: [employeeId], references: [id])
  employeeId        String?      @db.ObjectId
  schoolName        String
  diploma           String
  currentlyEnrolled Boolean?
  location          LocationType
  gpa               String
  description       String
  startDate         DateTime     @default(now())
  endDate           DateTime?    @default(now())
  createdAt         DateTime     @default(now())
}

model Certification {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  employee         Employee? @relation(fields: [employeeId], references: [id])
  employeeId       String?   @db.ObjectId
  certificateName  String
  organizationName String
  certificateId    String
  createdAt        DateTime  @default(now())
  issuedOn         DateTime  @default(now())
  validUntil       DateTime? @default(now())
  noExpiry         Boolean?
  certificateMedia CertificateMedia[]
}

model Skills {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
  name       String
  level      String
}

model Achievement {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
  resume     String[]
  additional String[]
}

model Attachment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
  resume     String[]
  additional String[]
}

type SocialLinks {
  platform String
  link     String
}
